apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply from: "$project.rootDir/spotless.gradle"

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

static def getBuildNumber() {
    return System.getenv("BUILD_NUMBER") as Integer ?: 0
}


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.devsparkle.flydapp"
        minSdkVersion 21
        targetSdkVersion 30
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + getBuildNumber()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // export the room schema, so we can use it for testing
       /* javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }*/
    }


    buildFeatures{
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    testOptions{
        unitTests{
            includeAndroidResources = true
        }
    }



    flavorDimensions "base"

    productFlavors {

        base {
            dimension "base"
            buildConfigField "Integer", "MAJOR", "${versionMajor}"
            buildConfigField "Integer", "MINOR", "${versionMinor}"
            buildConfigField "Integer", "PATCH", "${versionPatch}"
            buildConfigField "String", "BASE_URL", '"https://api.discogs.com/"'
            buildConfigField "String", "KEY", '"blzhZEFsqBWOikYzpbvK"'
            buildConfigField "String", "SECRET", '"JNmmiObzMPsMXNNuduncuhwmwESnrhHl"'
        }


    }

}


dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // support and UI
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'com.google.android.material:material:1.2.1'

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.fragment:fragment-ktx:1.2.5'

    // test
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'org.mockito:mockito-core:3.3.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'


    // retrofit
    def retrofit_version = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofit_version"

    def okhttp_version = "4.9.0"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"

    // json
    implementation "com.squareup.moshi:moshi:1.9.3"


    // lifecycle
    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    // kotlin coroutines
    def coroutines_android_version = '1.3.9'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_android_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_android_version"


    def dagger_version = "2.29.1"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger_version"


    // room - orm, model, database
    def room_version = "2.3.0-alpha02"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"
    implementation "androidx.room:room-rxjava3:$room_version"

    // navigation
    def nav_version = "2.3.0"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // glide - pictures loading
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    // timber - logging
    implementation 'com.jakewharton.timber:timber:4.7.1'




    // facebook way to detect the connectivity situation of the device
    implementation 'com.facebook.network.connectionclass:connectionclass:1.0.1'

    implementation 'com.airbnb.android:lottie:3.4.2'


    implementation 'com.github.pwittchen:reactivenetwork-rx2:3.0.8'

    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'


    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'


    // chuck chucker for http logging inspection
    debugImplementation "com.github.chuckerteam.chucker:library:3.3.0"
    releaseImplementation "com.github.chuckerteam.chucker:library-no-op:3.3.0"


    // facebook stetho - for rest logging
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'


    implementation "io.reactivex.rxjava3:rxjava:3.0.6"
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'


    def picassoVersion = '2.71828'

    //picasso
    implementation "com.squareup.picasso:picasso:$picassoVersion"
}
